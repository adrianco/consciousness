name: Comprehensive Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run nightly performance tests
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Unit Tests - Fast feedback
  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: consciousness_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test]"

    - name: Run unit tests
      run: |
        pytest tests/unit/ \
          --cov=consciousness \
          --cov-report=xml \
          --cov-report=term-missing \
          --cov-fail-under=80 \
          -m "unit and not slow" \
          --maxfail=5
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/consciousness_test

    - name: Upload unit test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unit-tests
        name: unit-tests-${{ matrix.python-version }}

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: consciousness_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test]"

    - name: Run integration tests
      run: |
        pytest tests/integration/ \
          --cov=consciousness \
          --cov-report=xml \
          --cov-append \
          -m "integration" \
          --timeout=600
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/consciousness_test
        REDIS_URL: redis://localhost:6379

    - name: Upload integration test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: integration-tests
        name: integration-tests

  # Digital Twin Tests
  digital-twin-tests:
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test]"

    - name: Run digital twin tests
      run: |
        pytest tests/digital_twin/ \
          --cov=consciousness \
          --cov-report=xml \
          -m "digital_twin" \
          --timeout=900

    - name: Upload digital twin coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: digital-twin-tests
        name: digital-twin-tests

  # Security Tests
  security-tests:
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test,security]"

    - name: Run security tests
      run: |
        pytest tests/security/ \
          -m "security" \
          --timeout=300

    - name: Run security audit
      run: |
        # Check for vulnerabilities in dependencies
        safety check --json --output safety-report.json || true

        # Static security analysis
        bandit -r consciousness/ -f json -o bandit-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json

  # End-to-End Tests
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [integration-tests, digital-twin-tests]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: consciousness_test
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test]"

    - name: Install Playwright
      run: |
        playwright install --with-deps chromium

    - name: Start application
      run: |
        python -m consciousness.main &
        sleep 10
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/consciousness_test
        CONSCIOUSNESS_ENV: test

    - name: Run E2E tests
      run: |
        pytest tests/e2e/ \
          -m "e2e" \
          --timeout=1200

    - name: Upload E2E artifacts
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: e2e-artifacts
        path: |
          test-results/
          playwright-report/

  # Performance Tests (on schedule or manual trigger)
  performance-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf]')
    needs: integration-tests

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test,performance]"

    - name: Run performance tests
      run: |
        pytest tests/performance/ \
          -m "performance" \
          --timeout=1800 \
          --benchmark-json=benchmark-results.json

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: benchmark-results.json

  # Quality Gates
  quality-gates:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, digital-twin-tests, security-tests]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test]"

    - name: Download all coverage reports
      uses: actions/download-artifact@v3
      with:
        name: coverage-reports
        path: ./coverage-reports/
      continue-on-error: true

    - name: Run comprehensive coverage
      run: |
        pytest tests/ \
          --cov=consciousness \
          --cov-report=xml \
          --cov-report=html \
          --cov-fail-under=85 \
          -m "not (performance or load or stress)" \
          --maxfail=10

    - name: Code quality checks
      run: |
        # Type checking
        mypy consciousness/

        # Code formatting
        black --check consciousness/

        # Import sorting
        isort --check-only consciousness/

        # Linting
        flake8 consciousness/

    - name: Upload final coverage report
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: comprehensive
        name: comprehensive-coverage
        fail_ci_if_error: true

  # Build and Test Docker Image
  docker-test:
    runs-on: ubuntu-latest
    needs: quality-gates

    steps:
    - uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        docker build -t consciousness:test .

    - name: Test Docker image
      run: |
        docker run --rm consciousness:test python -m pytest tests/unit/ -x

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [quality-gates, e2e-tests, docker-test]
    if: always()

    steps:
    - name: Notify on success
      if: ${{ needs.quality-gates.result == 'success' && needs.e2e-tests.result == 'success' }}
      run: |
        echo "✅ All tests passed! Ready for deployment."

    - name: Notify on failure
      if: ${{ needs.quality-gates.result == 'failure' || needs.e2e-tests.result == 'failure' }}
      run: |
        echo "❌ Tests failed. Please check the logs."
        exit 1
