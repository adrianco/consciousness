name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install UV
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Add UV to PATH
        run: echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: uv sync

      - name: Run linting
        run: uv run ruff check .

      - name: Run type checking
        run: uv run mypy consciousness

      - name: Run tests
        run: uv run pytest --cov=consciousness --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  build:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to production
        uses: appleboy/ssh-action@v1.0.0
        env:
          IMAGE_DIGEST: ${{ needs.build.outputs.image-digest }}
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          envs: IMAGE_DIGEST
          script: |
            set -e

            cd /opt/consciousness

            # Create backup before deployment
            echo "Creating pre-deployment backup..."
            ./scripts/backup.sh

            # Pull latest images
            echo "Pulling latest container images..."
            docker-compose -f docker-compose.prod.yml pull

            # Update environment
            echo "Updating environment configuration..."
            cp .env.example .env

            # Deploy with zero downtime
            echo "Deploying updated containers..."
            docker-compose -f docker-compose.prod.yml up -d --remove-orphans

            # Wait for services to start
            echo "Waiting for services to start..."
            sleep 30

            # Health check
            echo "Performing health check..."
            for i in {1..10}; do
              if curl -f http://localhost/health; then
                echo "Health check passed"
                break
              fi
              if [ $i -eq 10 ]; then
                echo "Health check failed after 10 attempts"
                exit 1
              fi
              echo "Health check attempt $i failed, retrying in 10 seconds..."
              sleep 10
            done

            # Clean up old images
            echo "Cleaning up old Docker images..."
            docker image prune -f

            echo "Deployment completed successfully!"

      - name: Notify deployment success
        if: success()
        run: |
          curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
            -H 'Content-type: application/json' \
            --data '{"text":"✅ Consciousness System deployed successfully to production"}' || true

      - name: Notify deployment failure
        if: failure()
        run: |
          curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
            -H 'Content-type: application/json' \
            --data '{"text":"❌ Consciousness System deployment failed"}' || true
